[[not-quite-not]]
=== 不完全不

在互联网上搜索 “Apple”，返回的结果很可能是一个公司、水果和各种食谱。((("relevance", "controlling", "must_not clause in bool query")))((("bool query", "must_not clause")))我们可以将查询结果的范围缩小至只返回公司，然后排除 `pie` 、 `tart` 、 `crumble` 和 `tree` 这样的词，在 `bool` 查询中用 `must_not` 语句来实现：

[source,json]
-------------------------------
GET /_search
{
  "query": {
    "bool": {
      "must": {
        "match": {
          "text": "apple"
        }
      },
      "must_not": {
        "match": {
          "text": "pie tart fruit crumble tree"
        }
      }
    }
  }
}
-------------------------------

但谁又敢保证在排除 `tree` 或 `crumble` 这种词后，不会错失一个与苹果公司特别相关的文档呢？有时， `must_not` 条件会过于严格。

[[boosting-query]]
==== 权重提升查询

{ref}/query-dsl-boosting-query.html[`boosting` 查询]
恰恰能解决这个问题。((("boosting query")))((("relevance", "controlling", "boosting query")))它仍然允许我们将关于水果或甜点的结果包括到结果中，但是使它们降级——即降低它们原来可能应有的排名：

[source,json]
-------------------------------
GET /_search
{
  "query": {
    "boosting": {
      "positive": {
        "match": {
          "text": "apple"
        }
      },
      "negative": {
        "match": {
          "text": "pie tart fruit crumble tree"
        }
      },
      "negative_boost": 0.5
    }
  }
}
-------------------------------

它接受 `positive` 和 `negative` 查询，((("positive query and negative query (in boosting query)")))不仅将只与 `positive` 查询匹配的文档包括在结果列表中，而且将与 `negative` 查询匹配的文档的原始评分 `_score` ((("negative_boost")))与 `negative_boost` 相乘。

为了达到效果， `negative_boost` 的值必须小于 `1.0` 。在这个示例中，所有包含负向词的文档评分 `_score` 都会减半。
